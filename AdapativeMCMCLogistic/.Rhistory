alpha_shell <- matrix(0, nrow = M, ncol = gibbs_iter)
sigma_shell <- matrix(0, nrow = 1, ncol = gibbs_iter)
# initialize
beta_shell[,1] <- rep(100, p)
alpha_shell[,1] <- rnorm(n = M, mean = 0, sd = 100)
sigma_shell[1] <- 200
for(iter in 2:gibbs_iter){
beta_shell[,iter]<- metrop_hastings(x_0 = beta_shell[, iter-1],
log_post_density=condpost_beta,
proposal_dist =function(x, prop_sigma) rmvnorm(1, mean = x, sigma = prop_sigma*diag(p)),
y = y, x = x,
alpha = alpha_shell[,iter-1],
sigma = sigma_shell[,iter-1],
subjid = subjid, M=M,
prop_sigma = 50)$x_0
alpha_shell[,iter]<- metrop_hastings(x_0 = alpha_shell[, iter-1],
log_post_density=condpost_alpha,
proposal_dist =function(x, prop_sigma) rmvnorm(1, mean = x, sigma = prop_sigma*diag(M)),
y = y, x = x,
beta = beta_shell[,iter],
sigma = sigma_shell[,iter-1],
subjid = subjid, M=M,
prop_sigma = 100)$x_0
sigma_shell[,iter]<- metrop_hastings(x_0 = sigma_shell[, iter-1],
log_post_density=condpost_sigma,
proposal_dist =function(x, prop_sigma) rmvnorm(1, mean = x, sigma = prop_sigma*diag(1)),
y = y, x = x,
beta = beta_shell[,iter],
alpha = alpha_shell[,iter],
subjid = subjid, M=M, lower=0,
prop_sigma = 100)$x_0
}
return(list(beta_shell=beta_shell, alpha_shell=alpha_shell, sigma_shell=sigma_shell))
}
N_sims <- 1000
gibbs_iter <- 1000
sim_dat <- replicate(n = N_sims, simulate_data(M=50), simplify = F)
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
library(mvtnorm)
library(invgamma)
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
library(lme4)
lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) )
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
par(mfrow=c(2,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell, type='l')
plot(res$sigma_shell[1,], type='l')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
library(MASS)
N_sims <- 1000
gibbs_iter <- 1000
sim_dat <- replicate(n = N_sims, simulate_data(M=50), simplify = F)
library(mvtnorm)
library(invgamma)
library(lme4)
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
warnings()
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
cov(c(1,1,23,234), c(1,23,5,3,2))
cov(x = cbind(rnorm(n = 100), rnorm(100)))
cov(x = cbind(rnorm(n = 100, sd=50), rnorm(100, sd = 10)))
50^2
cov(x = cbind(rnorm(n = 100, sd=50), rnorm(100, sd = 10)))
cbind(c(10, 0), c(0,10))
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
prop_sigma <- jumping_var[[tuning_end]]
prop_sigma
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
jumping_var[[tuning_end]]
jumping_var
jumping_var[[1]]
jumping_var[[2]]
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=30)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$``
res[[4]]
sqrt(72)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 500)
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
par(mfrow=c(1,1))
plot(res$alpha_shell[3,], type='l')
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 2)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 5)
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
sqrt(res$prop_sigma)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
sqrt(12)
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 10)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 100)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
# par(mfrow=c(1,1))
# plot(res$alpha_shell[3,], type='l')
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 2)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
# par(mfrow=c(1,1))
# plot(res$alpha_shell[3,], type='l')
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 2)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
# par(mfrow=c(1,1))
# plot(res$alpha_shell[3,], type='l')
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
source('~/Box Sync/Coursework/Spring 2018/Longitudinal Data Analysis/Final Project/code/FunctionSourceCode.R')
res<-gibbs_sampler(sim_dat[[1]], gibbs_iter=1000, tuning_end = 2)
par(mfrow=c(3,1))
plot(res$beta_shell[1,], type='l')
plot(res$beta_shell[2,], type='l')
plot(res$sigma_shell[1,], type='l')
res$prop_sigma
# par(mfrow=c(1,1))
# plot(res$alpha_shell[3,], type='l')
summary(lmer(data = sim_dat[[1]], formula = y ~ t1 + (1 | subjid) ))
library(ggplot2)
setwd("/Users/arman/Documents/StableMarkets/BayesianTutorials/AdapativeMCMCLogistic")
################################################################################
### 0 - Simulate Data
################################################################################
set.seed(10)
N<-1000
d<-data.frame(age_group=sample(x = c(0,1,2), size = N, replace = T))
d$age_1<-ifelse(d$age_group==1,1,0)
d$age_2<-ifelse(d$age_group==2,1,0)
d$trt<-rbinom(n = N, size = 1,prob = invlogit(0 + 2*d$age_1 + - 2*d$age_2))
d$y<-rbinom(n = N, size = 1,
prob = invlogit(-1 + .7*d$age_1 + 1.1*d$age_2 + 1.1*d$trt))
X<-as.matrix(cbind(1,d[,2:4])) # model matrix
Y<-matrix(d$y, ncol=1) # outcome vector
p<-ncol(X)
#Author: Arman Oganisian
library(LaplacesDemon)
library(invgamma)
library(MASS)
library(tidyr)
library(dplyr)
library(ggplot2)
setwd("/Users/arman/Documents/StableMarkets/BayesianTutorials/AdapativeMCMCLogistic")
################################################################################
### 0 - Simulate Data
################################################################################
set.seed(10)
N<-1000
d<-data.frame(age_group=sample(x = c(0,1,2), size = N, replace = T))
d$age_1<-ifelse(d$age_group==1,1,0)
d$age_2<-ifelse(d$age_group==2,1,0)
d$trt<-rbinom(n = N, size = 1,prob = invlogit(0 + 2*d$age_1 + - 2*d$age_2))
d$y<-rbinom(n = N, size = 1,
prob = invlogit(-1 + .7*d$age_1 + 1.1*d$age_2 + 1.1*d$trt))
X<-as.matrix(cbind(1,d[,2:4])) # model matrix
Y<-matrix(d$y, ncol=1) # outcome vector
p<-ncol(X)
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dnorm(x = beta, mean = 0, sd = 1000, log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
log_posterior(c(1,1,1,1), X, Y)
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dmvn(x = beta, mu = 0, sigma = 1000*diag(p), log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
log_posterior(c(1,1,1,1), X, Y)
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dmvn(x = beta, mu = 0, Sigma = 1000*diag(p), log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
log_posterior(c(1,1,1,1), X, Y)
Rcpp::sourceCpp('samples.cpp')
log_post(c(1,1,1,1), Y, X)
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dmvn(x = beta, mu = 0, Sigma = (1000^2)*diag(p), log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
log_posterior(c(1,1,1,1), X, Y)
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dmvn(x = beta, mu = rep(0,p), Sigma = (1000^2)*diag(p), log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
log_posterior(c(1,1,1,1), X, Y)
log_post(c(1,1,1,1), Y, X)
Rcpp::sourceCpp('samples.cpp')
Rcpp::sourceCpp('samples.cpp')
log_posterior(c(1,1,1,1), X, Y)
log_post(c(1,1,1,1), Y, X)
Rcpp::sourceCpp('samples.cpp')
log_post(c(1,1,1,1), Y, X)
log_posterior(c(1,1,1,1), X, Y)
sample_mh_cpp <-function(X, Y, iter, jump_v){
# create shells
p <- ncol(X)
beta_shell <- matrix(NA, nrow = iter, ncol = p)
accept_shell <- numeric(length = iter)
# starting values
beta_shell[1,] <- rep(10, p)
for(i in 2:iter){
beta_0 <- beta_shell[i-1, ]
# draw from proposal distribution
beta_c <- mvrnorm(n = 1, beta_0, Sigma = jump_v*diag(p))
# calculate ratio of conditional posterior densities
r_num <- log_post(beta_c, X, Y )
r_denom <- log_post(beta_0, X, Y )
# calculate acceptance probability
r <- exp(r_num - r_denom)
rmin<-min(r,1)
# accept or reject proposal
if( rbinom(1,1,rmin) == 1 ){
beta_shell[i, ] <- beta_c
}else{
beta_shell[i, ] <- beta_0
}
accept_shell[i] <- rmin
}
colnames(beta_shell) <- colnames(X)
colnames(beta_shell)[1] <- 'intercept'
return(list(beta_shell, accept_shell) )
}
library(rbenchmark)
library(rbenchmark)
benchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05) )
log_posterior<-function(beta, X, Y){
# calculate likelihood
xb <- X %*% beta
xb <- ifelse(xb>10, 10, ifelse( xb< (-10) ,-10, xb))
p_i <- invlogit(xb)
lik <- sum(dbern(Y, p_i, log = T))
# calculate prior
pr <- dmvn(x = beta, mu = rep(0,p), Sigma = (1000^2)*diag(p), log = T)
log_cond_post <- lik + pr
return(log_cond_post)
}
# use Metropolis Hastings algorithm to sample from cond. post. of beta
sample_mh<-function(X, Y, iter, jump_v){
# create shells
p <- ncol(X)
beta_shell <- matrix(NA, nrow = iter, ncol = p)
accept_shell <- numeric(length = iter)
# starting values
beta_shell[1,] <- rep(10, p)
for(i in 2:iter){
beta_0 <- beta_shell[i-1, ]
# draw from proposal distribution
beta_c <- mvrnorm(n = 1, beta_0, Sigma = jump_v*diag(p))
# calculate ratio of conditional posterior densities
r_num <- log_posterior(beta_c, X, Y )
r_denom <- log_posterior(beta_0, X, Y )
# calculate acceptance probability
r <- exp(r_num - r_denom)
rmin<-min(r,1)
# accept or reject proposal
if( rbinom(1,1,rmin) == 1 ){
beta_shell[i, ] <- beta_c
}else{
beta_shell[i, ] <- beta_0
}
accept_shell[i] <- rmin
}
colnames(beta_shell) <- colnames(X)
colnames(beta_shell)[1] <- 'intercept'
return(list(beta_shell, accept_shell) )
}
# Adaptive Metropolis Hastings
sample_amh <- function(X, Y, iter, jump_v,
ad_start, ad_stop, ad_int, ad_period){
# create shells
p <- ncol(X)
beta_shell <- matrix(NA, nrow = iter, ncol = p)
accept_shell <- numeric(length = iter)
# starting values
beta_shell[1,] <- rep(10, p)
s <- 1
for(i in 2:iter){
beta_0 <- beta_shell[i-1, ]
if(i >= ad_start & i%%ad_int==0 & i <= ad_stop ){
accept_rate <- mean(accept_shell[  (i - ad_period):i ])
s <- s * (accept_rate/.234) # optimal acceptance rate
jump_v <- s * cov(beta_shell[ (i - ad_period):(i-1) , ])
}
# draw from proposal distribution
beta_c <- mvrnorm(n = 1, beta_0, Sigma = jump_v )
# calculate ratio of conditional posterior densities
r_num <- log_posterior(beta_c, X, Y )
r_denom <- log_posterior(beta_0, X, Y )
# calculate acceptance probability
r <- exp(r_num - r_denom)
rmin<-min(r,1)
# accept or reject proposal
if( rbinom(1,1,rmin) == 1 ){
beta_shell[i, ] <- beta_c
}else{
beta_shell[i, ] <- beta_0
}
accept_shell[i] <- rmin
}
colnames(beta_shell) <- colnames(X)
colnames(beta_shell)[1] <- 'intercept'
return(list(beta_shell, accept_shell) )
}
sample_mh_cpp <-function(X, Y, iter, jump_v){
# create shells
p <- ncol(X)
beta_shell <- matrix(NA, nrow = iter, ncol = p)
accept_shell <- numeric(length = iter)
# starting values
beta_shell[1,] <- rep(10, p)
for(i in 2:iter){
beta_0 <- beta_shell[i-1, ]
# draw from proposal distribution
beta_c <- mvrnorm(n = 1, beta_0, Sigma = jump_v*diag(p))
# calculate ratio of conditional posterior densities
r_num <- log_post(beta_c, X, Y )
r_denom <- log_post(beta_0, X, Y )
# calculate acceptance probability
r <- exp(r_num - r_denom)
rmin<-min(r,1)
# accept or reject proposal
if( rbinom(1,1,rmin) == 1 ){
beta_shell[i, ] <- beta_c
}else{
beta_shell[i, ] <- beta_0
}
accept_shell[i] <- rmin
}
colnames(beta_shell) <- colnames(X)
colnames(beta_shell)[1] <- 'intercept'
return(list(beta_shell, accept_shell) )
}
benchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05) )
################################################################################
### 2 - Run Sampler
################################################################################
iter <- 5000
p <- ncol(X)
benchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05) )
sample_mh_cpp <-function(X, Y, iter, jump_v){
# create shells
p <- ncol(X)
beta_shell <- matrix(NA, nrow = iter, ncol = p)
accept_shell <- numeric(length = iter)
# starting values
beta_shell[1,] <- rep(10, p)
for(i in 2:iter){
beta_0 <- beta_shell[i-1, ]
# draw from proposal distribution
beta_c <- mvrnorm(n = 1, beta_0, Sigma = jump_v*diag(p))
# calculate ratio of conditional posterior densities
r_num <- log_post(beta_c, Y, X )
r_denom <- log_post(beta_0, Y, X )
# calculate acceptance probability
r <- exp(r_num - r_denom)
rmin<-min(r,1)
# accept or reject proposal
if( rbinom(1,1,rmin) == 1 ){
beta_shell[i, ] <- beta_c
}else{
beta_shell[i, ] <- beta_0
}
accept_shell[i] <- rmin
}
colnames(beta_shell) <- colnames(X)
colnames(beta_shell)[1] <- 'intercept'
return(list(beta_shell, accept_shell) )
}
benchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05) )
sample_mh_cpp(X, Y, iter = iter, jump_v = .05)
install.packages('microbenchmark')
library(microbenchmark)
microbenchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05))
microbenchmark(R_MH = sample_mh(X, Y, iter = iter, jump_v = .05),
Cpp_MH = sample_mh_cpp(X, Y, iter = iter, jump_v = .05),times = 10)
Rcpp::sourceCpp('samples.cpp')
Rcpp::sourceCpp('samples.cpp')
library(Rcpp)
